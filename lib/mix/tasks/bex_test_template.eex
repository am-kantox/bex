defmodule <%= inspect(@test_module) %> do
  use ExUnit.Case, async: true

  import Mox
  
  <%= for {mod, fun, args} <- @funs do %>
    test "<%= inspect(mod) %>.<%= fun %>/<%= Enum.count(args) %>" do
      test_process = self()

      <%= inspect(@mox_module) %>
      |> expect(:<%= fun %>, 1, fn <%= Enum.map_join(args, ", ", & "_#{&1}") %> ->
        send(test_process, {:<%= fun %>, <%= Enum.count(args) %>})
      end)

      <%= inspect(mod) %>.<%= fun %>(<%= Enum.map_join(args, ", ", fn _ -> "nil" end) %>)
      assert_receive({:<%= fun %>, <%= Enum.count(args) %>})
    end
  <% end %>
end
